// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2019 07:26:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab4_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab4_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CIN;
reg CLK;
reg [3:0] INPUTB;
reg [1:0] MSA;
reg [1:0] MSB;
reg [2:0] S;
// wires                                               
wire COUT;
wire [3:0] OUTPUTB;
wire [3:0] REGA;
wire [3:0] REGB;

// assign statements (if any)                          
Lab4_CPU i1 (
// port map - connection between master ports and signals/registers   
	.CIN(CIN),
	.CLK(CLK),
	.COUT(COUT),
	.INPUTB(INPUTB),
	.MSA(MSA),
	.MSB(MSB),
	.OUTPUTB(OUTPUTB),
	.REGA(REGA),
	.REGB(REGB),
	.S(S)
);
initial 
begin 
#1200000 $finish;
end 
// INPUTB[ 3 ]
initial
begin
	INPUTB[3] = 1'b0;
	INPUTB[3] = #400000 1'b1;
	INPUTB[3] = #400000 1'b0;
end 
// INPUTB[ 2 ]
always
begin
	INPUTB[2] = 1'b0;
	INPUTB[2] = #200000 1'b1;
	#200000;
end 
// INPUTB[ 1 ]
always
begin
	INPUTB[1] = 1'b0;
	INPUTB[1] = #100000 1'b1;
	#100000;
end 
// INPUTB[ 0 ]
always
begin
	INPUTB[0] = 1'b0;
	INPUTB[0] = #50000 1'b1;
	#50000;
end 
// MSA[ 1 ]
always
begin
	MSA[1] = 1'b0;
	MSA[1] = #300000 1'b1;
	#300000;
end 
// MSA[ 0 ]
always
begin
	MSA[0] = 1'b0;
	MSA[0] = #150000 1'b1;
	#150000;
end 
// MSB[ 1 ]
always
begin
	MSB[1] = 1'b0;
	MSB[1] = #300000 1'b1;
	#300000;
end 
// MSB[ 0 ]
always
begin
	MSB[0] = 1'b0;
	MSB[0] = #150000 1'b1;
	#150000;
end 

// S[2]
initial
begin
	repeat(7)
	begin
		S[2] = 1'b0;
		S[2] = #80000 1'b1;
		# 80000;
	end
	S[2] = 1'b0;
end 

// S[1]
always
begin
	S[1] = 1'b0;
	S[1] = #40000 1'b1;
	#40000;
end 

// S[0]
always
begin
	S[0] = 1'b0;
	S[0] = #20000 1'b1;
	#20000;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CIN
initial
begin
	CIN = 1'b0;
end 
endmodule

